import logging
from google import genai
from google.genai import types
from config import Config
from typing import Dict, Tuple
import re


logger = logging.getLogger(__name__)

class GenIaService:
    def __init__(self, project_id: str, location: str):
        self.genai_client = genai.Client(
            vertexai = True,
            project=project_id,
            location=location,
            http_options=types.HttpOptions(api_version='v1')
        )
    
    def evaluate_profile_relevance_detailed(self, profile_data: Dict) :
        """
        Eval√∫a un perfil usando IA con informaci√≥n m√°s detallada
        """
        profile_text = f"""
        URL: {profile_data['url']}
        T√≠tulo: {profile_data['title']}
        Snippet: {profile_data['snippet']}
        Empresa buscada: {profile_data['biz_name']}
        """

        url = profile_data['url']
        title = profile_data['title']
        snippet = profile_data['snippet']
        biz_name = profile_data['biz_name']

        prompt = f"""
                #CONTEXT#
        Act√∫a como un analista de riesgos especializado en la clasificaci√≥n de contactos corporativos. Tu objetivo es utilizar la informaci√≥n proporcionada para clasificar con precisi√≥n a cada individuo seg√∫n su rol y su conexi√≥n con el departamento de finanzas, siguiendo las reglas establecidas.
        Analiza la informaci√≥n tra√≠da por {url} de la b√∫squeda. Clasifica el perfil del contacto seg√∫n los criterios de calidad y roles especificados.
        
        # #OBJECTIVE#
        Clasificar el perfil del contacto de la empresa {biz_name} en tres categor√≠as: Tomadores de Decisi√≥n, Referenciadores y No referenciadores.
        #INSTRUCTIONS#

        1. Utiliza √∫nicamente la informaci√≥n contenida en {url} de la b√∫squeda con los links proporcionados y la informacion de {title} y {snippet}. No realices b√∫squedas externas ni utilices informaci√≥n fuera de la proporcionada.
        2. Clasifica el perfil del contacto seg√∫n su t√≠tulo o rol:

        - Tomador de Decisi√≥n: Due√±o, Gerente General, Director de Finanzas, CFO, Gerente de Administraci√≥n y Finanzas, Jefe de Tesorer√≠a, Controller Financiero, Gerente de Planeaci√≥n Financiera, Contador, Presidente.

        - Referenciador: Personas que no toman decisiones pero tienen contacto directo con los tomadores de decisi√≥n (ejemplo: Secretaria, Analista, Gerente Generales, Gerente de Operaciones, Roles de gerencias en general).

        - No Referenciador: Personas que no toman decisiones ni pueden redirigir o comunicar con los tomadores de decisi√≥n.

        -Invalido: Si esta persona no trabaja en la empresa (Puede ser que haya trabajado antes pero actualmente no y seguiria siendo invalido)

        - El rol puede variar sutilmente pero si sigue la l√≠nea del perfil o esta en otro idioma, clasif√≠calo en la categor√≠a correspondiente.

        3. Para el perfil del contacto, incluye los siguientes campos: SCORE, EMPRESA_ACTUAL,ROL_FINANZAS,EXPLICACION
        4. Asegurate de que el contacto obtenido, trabaje actualmente en {biz_name}, sino es el caso descartalo como posible contacto y marcalo en su score como invalido.
        5. Devuelve la informaci√≥n en formato de texto, donde el perfil del contacto es un objeto con su informaci√≥n respectiva. Responde en formato:
            SCORE: Tomador de Decisi√≥n/Referenciador/No Referenciador/Invalido
            EMPRESA_ACTUAL: S√≠/No/Incierto
            ROL_FINANZAS: S√≠/No/Incierto
            EXPLICACION: [breve explicaci√≥n de porque se tomo la decision]

        #EXAMPLES#
        Input 1:
        Tittle = "Gerente General" 
        url = "https://linkedin.com/in/juanperez"
        Snippet = "Gerente General en Maderas y Materiales la Silla, SA DE CV ¬∑ Experiencia: Maderas y Materiales la Silla, SA DE CV ¬∑ Ubicaci√≥n: San Nicol√°s de los Garza ..."
        biz_name = 'Maderas y materiales la silla, SA DE CV'

        Output 1:
        SCORE: Tomador de Decisi√≥n
        EMPRESA_ACTUAL: S√≠
        ROL_FINANZAS: S√≠
        EXPLICACION: La persona trabaja en un rol central de la empresa, esta relacionado con finanzas y toma las decisiones dentro de la misma.

        Input 2:
        Tittle = "Analista de sistemas"
        url = "https://linkedin.com/in/sofiaruiz"
        Snippet = "Analista de Sistemas en Maderas y Materiales la Silla, SA DE CV ¬∑ Experiencia en desarrollo de software..."
        biz_name = 'Maderas y materiales la silla, SA DE CV'

        Output 2:
        SCORE: No Referenciador
        EMPRESA_ACTUAL: S√≠
        ROL_FINANZAS: No
        EXPLICACION: La persona trabaja en la empresa pero su rol de "Analista de Sistemas" no tiene relaci√≥n directa con finanzas ni con la toma de decisiones financieras o administrativas.

        Input 3:
        Tittle = "Gerente de Finanzas"
        url = "https://linkedin.com/in/carlosgomez"
        Snippet = "Gerente de Finanzas en 'Empresa XYZ' ¬∑ Experiencia previa en Maderas y Materiales la Silla, SA DE CV (2018-2022)."
        biz_name = 'Maderas y materiales la silla, SA DE CV'

        Output 3:
        SCORE: Invalido
        EMPRESA_ACTUAL: No
        ROL_FINANZAS: S√≠
        EXPLICACION: El contacto no trabaja actualmente en la empresa objetivo. Su rol de "Gerente de Finanzas" es de un empleo anterior.


        Input 4:
        Tittle = "Senior Manager"
        url = "https://linkedin.com/in/lauramartinez"
        Snippet = "Senior Manager en Maderas y Materiales la Silla, SA DE CV."
        biz_name = 'Maderas y materiales la silla, SA DE CV'

        Output 4:
        SCORE: Referenciador
        EMPRESA_ACTUAL: S√≠
        ROL_FINANZAS: Incierto
        EXPLICACION: El t√≠tulo de "Senior Manager" es ambiguo. No especifica un √°rea (finanzas, operaciones, marketing, etc.), por lo que no es posible confirmar si tiene un rol de finanzas. Se clasifica como Referenciador por su posici√≥n jer√°rquica.
        """

        try:
            """
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.3
            )
            """
            response = self.genai_client.models.generate_content(
                model=Config.GEMINI_MODEL_NAME,
                contents=prompt,
                config=Config.GEMINI_CONFIG

            )
            result = response.text.strip()

            logger.info(f"üîç Evaluaci√≥n de perfil: {result}")
            
            return result
        except Exception as e:
            logger.error(f"‚ùå Error evaluando perfil: {str(e)}")
            raise e

    def extract_structured_info(self, result: str) :
        """
        Extrae informaci√≥n estructurada de la respuesta
        """ 
        try:
            # Extraer informaci√≥n estructurada de la respuesta
            score_match = re.search(r'SCORE:\s*(\d+)', result)
            empresa_match = re.search(r'EMPRESA_ACTUAL:\s*([^\n]+)', result)
            rol_match = re.search(r'ROL_FINANZAS:\s*([^\n]+)', result)
            explicacion_match = re.search(r'EXPLICACION:\s*([^\n]+)', result)

            score = score_match.group(1).strip() if score_match else "Invalido"
            empresa_actual = empresa_match.group(1).strip() if empresa_match else "Incierto"
            rol_finanzas = rol_match.group(1).strip() if rol_match else "Incierto"
            explicacion = explicacion_match.group(1).strip() if explicacion_match else "Sin explicaci√≥n"
        
            structured_info = {
                'score': score,
                'empresa_actual': empresa_actual,
                'rol_finanzas': rol_finanzas,
                'explicacion': explicacion
            }

            logger.info(f"üîç Evaluaci√≥n informacion estructurada: {structured_info}")
            return structured_info

        except Exception as e:
            logger.error(f"‚ùå Error evaluando: {str(e)}")
            raise e